import 'package:diabetic_diary/database.dart';
import 'package:diabetic_diary/measureable.dart';
import 'package:diabetic_diary/translation.dart';
import 'package:diabetic_diary/units.dart';
import 'package:moor/ffi.dart';
// don't import moor_web.dart or moor_flutter/moor_flutter.dart in shared code
import 'package:moor/moor.dart';
//import 'package:moor/moor_web.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'dart:io';

import '../dimensions.dart';
import '../edible.dart';
import '../indexable.dart';
import '../quantity.dart';
import 'mock_database.dart';

// Include the autogenerated code
part 'moor_database.g.dart';

class _DimensionComponents extends Table {
  TextColumn get dimensionsId => text()();
  TextColumn get componentId => text()();
  IntColumn get exponent => integer()();

  @override
  Set<Column> get primaryKey => {dimensionsId, componentId};
}

class _DimensionUnits extends Table {
  TextColumn get dimensionsId => text()();
  TextColumn get unitsId => text()();
  RealColumn get multiplier => real()();

  @override
  Set<Column> get primaryKey => {dimensionsId, unitsId};
}

class _Measurables extends Table {
  TextColumn get id => text()();
  TextColumn get dimensionsId => text()();

  @override
  Set<Column> get primaryKey => {id};
}

class _Edibles extends Table {
  TextColumn get id => text()();
  TextColumn get contains => text()();
  RealColumn get amount => real()();
  TextColumn get unitsId => text()();

  @override
  Set<Column> get primaryKey => {id, contains};
}
/*
@DataClassName("_Dish")
class _Dishes extends Table {
  TextColumn get id => text()();
  TextColumn get ingredientId => text()();
  TextColumn get unitsId => text()();
  RealColumn get amount => real()();

  @override
  Set<Column> get primaryKey => {id, ingredientId};
}
*/
LazyDatabase _openConnection() {
  // the LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    // put the database file, called db.sqlite here, into the documents folder
    // for your app.
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    print("opening moor db at $file");
    return VmDatabase(file);
//    return WebDatabase('db');
  });
}

@UseMoor(tables: [_DimensionUnits, _DimensionComponents, _Measurables, _Edibles])
class _MoorDatabase extends _$_MoorDatabase {
  // we tell the database where to store the data with this constructor
  _MoorDatabase() : super(_openConnection());

  // you should bump this number whenever you change or add a table definition. Migrations
  // are covered later in this readme.
  @override
  int get schemaVersion => 1;
}


class MoorDatabase extends Database {
  final _MoorDatabase db;

  MoorDatabase(this.db) :
        dimensions = MoorDimensionsCollection(db),
        units = MoorUnitsCollection(db),
        measurables = MoorMeasurablesCollection(db),
        edibles = MoorEdiblesCollection(db: db);

  static MoorDatabase create() {
    return MoorDatabase(_MoorDatabase());
  }


  @override
  final AsyncDataCollection<Dimensions> dimensions;

  @override
  final AsyncDataCollection<Units> units;

  @override
  final AsyncDataCollection<Measurable> measurables;

  @override
  final AsyncDataCollection<Edible> edibles;

  @override
  Future<int> get version => Future(() => 0);
}

abstract class MoorDataCollection<D extends DataClass, D2 extends Indexable, TI extends TableInfo> implements AsyncDataCollection<D2> {
  final _MoorDatabase db;
  final TI tableInfo;
  final GeneratedTextColumn idCol;

  MoorDataCollection(this.db, this.tableInfo, this.idCol);

  Insertable<D> valueToRow(D2 val);
  D2 rowToValue(D row);

  @override
  Future<Symbol> add(D2 value) async {
    final row = valueToRow(value);
//    final result = await db.into(tableInfo).insertOnConflictUpdate(row);
    final result = await db.into(tableInfo).insert(row);
    print("result "+result.toString());
    return Future(() => value.id);
  }

  @override
  Future<Map<Symbol, D2>> cannedQuery(Symbol name, [List? parameters]) {
    // TODO: implement cannedQuery
    throw UnimplementedError();
  }

  @override
  Future<int> count() {
    // TODO: implement count
    throw UnimplementedError();
  }

  @override
  Future<D2> fetch(Symbol index) async {
    final results = db
      .select(tableInfo)
      ..where((a) => idCol.equals(symbolToString(index)));
    final row = await results.getSingle();
    // Convert the list of rows into a map from dimension id to exponent
    try {
      return rowToValue(row);
    }
    catch(e) {
      throw Exception("no such thing as "+symbolToString(index));
    }
  }

  @override
  void forEach(void Function(Symbol p1, D2 p2) visitor) {
    // TODO: implement forEach
  }

  @override
  Future<D2> get(Symbol index, D2 otherwise) async {
    final results = db
        .select(tableInfo)
      ..where((a) => idCol.equals(symbolToString(index)));
    final row = await results.getSingleOrNull();
    if (row == null)
      return otherwise;
    return rowToValue(row);
  }

  @override
  Future<Map<Symbol, D2>> getAll() {
    // TODO: implement getAll
    throw UnimplementedError();
  }

  @override
  Future<D2?> maybeGet(Symbol index, [D2? otherwise]) async {
    final results = db
        .select(tableInfo)
      ..where((u) => idCol.equals(symbolToString(index)));
    final row = await results.getSingleOrNull();
    if (row == null)
      return otherwise;
    return rowToValue(row);
  }

  @override
  void put(Symbol index, D2 value) {
    // TODO: implement put
  }

  @override
  Future<int> remove(Symbol index) async {
    final results = db
        .delete(tableInfo)
      ..where((u) => idCol.equals(symbolToString(index)));
    return results.go();
  }

  @override
  Future<int> removeAll() {
    final results = db
        .delete(tableInfo);
    return results.go();
  }
}

class MoorDimensionsCollection implements AsyncDataCollection<Dimensions> {
  final _MoorDatabase db;

  MoorDimensionsCollection(this.db);

  @override
  Future<Symbol> add(Dimensions dimensions) {
    dimensions.components.forEach((key, value) {
      db.into(db.dimensionComponents).insert(_DimensionComponentsCompanion(
        dimensionsId: Value(symbolToString(dimensions.id)),
        componentId: Value(symbolToString(key)),
        exponent: Value(value),
      ));
    });
    return Future(() => dimensions.id);
  }

  @override
  Future<Map<Symbol, Dimensions>> cannedQuery(Symbol name, [List? parameters]) {
    // TODO: implement cannedQuery
    throw UnimplementedError();
  }

  @override
  Future<int> count() async {
    final count = db.dimensionUnits.dimensionsId.count(distinct: true);
    final query = db.selectOnly(db.dimensionUnits)
      ..addColumns([count]);

    final r = await query.getSingle();
    return r.read(count);
  }

  @override
  Future<Dimensions> fetch(Symbol index) async {
    final results = db
      .select(db.dimensionComponents, distinct: true)
      ..where((a) => a.dimensionsId.equals(symbolToString(index)));
    final rows = await results.get();
    // Convert the list of rows into a map from dimension id to exponent
    final components = Map.fromEntries(rows.map((component) =>
        MapEntry(Symbol(component.dimensionsId), component.exponent)));
    // Use that map to construct a Dimensions instance
    return Dimensions(id: index, components: components);
  }

  @override
  void forEach(void Function(Symbol p1, Dimensions p2) visitor) {
    // TODO: implement forEach
  }

  @override
  Future<Dimensions> get(Symbol index, Dimensions otherwise) {
    // TODO: implement get
    throw UnimplementedError();
  }

  @override
  Future<Map<Symbol, Dimensions>> getAll() {
    // TODO: implement getAll
    throw UnimplementedError();
  }

  @override
  Future<Dimensions?> maybeGet(Symbol index, [Dimensions? otherwise]) async {
    final results = db
        .select(db.dimensionComponents, distinct: true)
      ..where((a) => a.dimensionsId.equals(symbolToString(index)));
    final rows = await results.get();
    if (rows.isEmpty)
      return otherwise;

    // Convert the list of rows into a map from dimension id to exponent
    final components = Map.fromEntries(rows.map((component) =>
        MapEntry(Symbol(component.componentId), component.exponent)));

    // Use that map to construct a Dimensions instance
    return Dimensions(id: index, components: components);
  }

  @override
  void put(Symbol index, Dimensions value) {
    // TODO: implement put
  }

  @override
  Future<int> remove(Symbol index) {
    // TODO: implement remove
    throw UnimplementedError();
  }

  @override
  Future<int> removeAll() {
    final results = db
        .delete(db.dimensionComponents);
    return results.go();
  }
}


class MoorUnitsCollection extends MoorDataCollection<_DimensionUnit, Units, $_DimensionUnitsTable> {

  MoorUnitsCollection(_MoorDatabase db) : super(db, db.dimensionUnits, db.dimensionUnits.unitsId);

  @override
  Units rowToValue(_DimensionUnit row) {
    return Units(Symbol(row.unitsId), Symbol(row.dimensionsId), row.multiplier);
  }

  @override
  Insertable<_DimensionUnit> valueToRow(Units val)  {
    return _DimensionUnit(
      dimensionsId: symbolToString(val.dimensionsId),
      unitsId: symbolToString(val.id),
      multiplier: val.multiplier.toDouble(),
    );
  }
}

class MoorMeasurablesCollection extends MoorDataCollection<_Measurable, Measurable, $_MeasurablesTable> {

  MoorMeasurablesCollection(_MoorDatabase db) : super(db, db.measurables, db.measurables.id);

  @override
  Measurable rowToValue(_Measurable row) {
    return Measurable(id: Symbol(row.id), dimensionsId: Symbol(row.dimensionsId));
  }

  @override
  Insertable<_Measurable> valueToRow(Measurable val)  {
    return _Measurable(
      id: symbolToString(val.id),
      dimensionsId: symbolToString(val.dimensionsId),
    );
  }
}

class MoorEdiblesCollection implements AsyncDataCollection<Edible> {
  final _MoorDatabase db;
  final $_EdiblesTable table;
  final GeneratedTextColumn idCol;
  final GeneratedTextColumn joinCol;
  final JoinedSelectStatement<Table, dynamic> commonQuery;


  MoorEdiblesCollection({required this.db}) :
    table = db.edibles,
    idCol = db.edibles.id,
    joinCol = db.edibles.unitsId,
    commonQuery = db.select(db.edibles)
      .join([
        leftOuterJoin(db.dimensionUnits, db.edibles.unitsId.equalsExp(db.dimensionUnits.unitsId))
      ]);

  Iterable<Insertable<_Edible>> valueToRows(Edible value) {
    List<Insertable<_Edible>> rows = [];
    value.contents.forEach((k, v) {
      rows.add(_Edible(
        id: symbolToString(value.id),
        contains: symbolToString(k),
        amount: v.amount.toDouble(),
        unitsId: symbolToString(v.units.id),
      ));
    });
    return rows;
  }

  Iterable<Insertable<_DimensionUnit>> valueToUnitRows(Edible value) {
    // Dedupe
    final units = value.contents.map((k, v) => MapEntry(
      v.units.id, v.units
    ));

    // Convert
    return units.values.map((v) =>
      _DimensionUnit(
        unitsId: symbolToString(v.id),
        dimensionsId: symbolToString(v.dimensionsId),
        multiplier: v.multiplier.toDouble(),
      )
    );
  }

  Edible rowsToValue(Iterable<TypedResult> rows) {
    Symbol index = Symbol('');
    final contents = Map.fromEntries(rows.map((row) {
      final edibleFields = row.readTable(db.edibles);
      final unitsFields = row.readTableOrNull(db.dimensionUnits);
      index = Symbol(edibleFields.id);
      // We do our best to create a Units value even if there is none, or it is malformed
      final units = Units(Symbol(unitsFields?.unitsId ?? ''), Symbol(unitsFields?.dimensionsId ?? ''), unitsFields?.multiplier ?? 0);
      final quantity = Quantity(edibleFields.amount, units);
      return MapEntry(Symbol(edibleFields.contains), quantity);
    }));

    if (contents.isEmpty)
      throw Exception("Parameter `rows` is an empty list");

    // Use that map to construct an instance
    return Edible(
      id: index,
      contents: contents,
    );
  }

  @override
  Future<Symbol> add(Edible value) async {
    final unitsRows = valueToUnitRows(value);
    final edibleRows = valueToRows(value); // FIXME stream this?
    final delEdibles = db.delete(table)..where((t) => idCol.equals(symbolToString(value.id)));
    return db.transaction(() async {
      await delEdibles.go();
      await db.batch((batch) {
        batch.insertAll(
            table,
            edibleRows.toList(),
        );
        batch.insertAll(
            db.dimensionUnits,
            unitsRows.toList(),
            mode: InsertMode.insertOrReplace
        );
      });
      return value.id;
    });
  }

  @override
  Future<Map<Symbol, Edible>> cannedQuery(Symbol name, [List? parameters]) {
    // TODO: implement cannedQuery
    throw UnimplementedError();
  }

  @override
  Future<int> count() {
    // TODO: implement count
    throw UnimplementedError();
  }

  @override
  Future<Edible> fetch(Symbol index) {
    // TODO: implement fetch
    throw UnimplementedError();
  }

  @override
  void forEach(void Function(Symbol p1, Edible p2) visitor) {
    // TODO: implement forEach
  }

  @override
  Future<Edible> get(Symbol index, Edible otherwise) {
    // TODO: implement get
    throw UnimplementedError();
  }

  @override
  Future<Map<Symbol, Edible>> getAll() {
    // TODO: implement getAll
    throw UnimplementedError();
  }

  @override
  Future<Edible?> maybeGet(Symbol index, [Edible? otherwise]) async {
    final results = commonQuery
      ..where(idCol.equals(symbolToString(index)));
    final rows = await results.get();
    print(rows);
    if (rows.isEmpty)
      return otherwise;

    // Use that map to construct a Dimensions instance
    return rowsToValue(rows);
  }

  @override
  void put(Symbol index, Edible value) {
    // TODO: implement put
  }

  @override
  Future<int> remove(Symbol index) {
    final query = db.delete(table)..where((a) => idCol.equals(symbolToString(index)));
    return query.go();
  }

  @override
  Future<int> removeAll() async {
    return db.delete(table).go();
  }

}

/*
select * from edibles where id == eid;
recurse down until all identified
 */


/*
abstract class MoorEntityCollection<T extends Table, D extends DataClass, D2 extends Indexable> implements AsyncDataCollection<D2> {
  final _MoorDatabase db;
  final TableInfo<T, D> tableInfo;
  final GeneratedTextColumn joinCol;
  final GeneratedTextColumn idCol;
  final JoinedSelectStatement<Table, dynamic> commonQuery;


  MoorEntityCollection(this.db, this.tableInfo, this.idCol, this.joinCol, this.commonQuery);

  D2 rowsToValue(Iterable<TypedResult> row);
  Iterable<Insertable<D>> valueToRows(D2 val);

  @override
  Future<Symbol> add(D2 value) async {
    final rows = valueToRows(value); // FIXME stream this?
    await Future.forEach(
      rows,
          (Insertable<D> row) => db.into(tableInfo).insertOnConflictUpdate(row),
    );
    return value.id;
  }

  @override
  Future<Map<Symbol, D2>> cannedQuery(Symbol name, [List? parameters]) {
    // TODO: implement cannedQuery
    throw UnimplementedError();
  }

  @override
  Future<int> count() {
    // TODO: implement count
    throw UnimplementedError();
  }

  @override
  Future<D2> fetch(Symbol index) async {
    final results = db
        .select(tableInfo)
        .join([
      leftOuterJoin(db.dimensionUnits, db.dimensionUnits.unitsId.equalsExp(joinCol)) // FIXME get compstats
    ])
      ..where(idCol.equals(symbolToString(index)));
    final rows = await results.get();
    // Convert the list of rows into a map from dimension id to exponent
    try {
      return rowsToValue(rows);
    }
    catch(e) {
      throw Exception("no such thing as "+symbolToString(index));
    }
  }

  @override
  void forEach(void Function(Symbol p1, D2 p2) visitor) {
    // TODO: implement forEach
  }

  @override
  Future<D2> get(Symbol index, D2 otherwise) {
    // TODO: implement get
    throw UnimplementedError();
  }

  @override
  Future<Map<Symbol, D2>> getAll() {
    // TODO: implement getAll
    throw UnimplementedError();
  }

  @override
  Future<D2?> maybeGet(Symbol index, [D2? otherwise]) {
    // TODO: implement maybeGet
    throw UnimplementedError();
  }

  @override
  void put(Symbol index, D2 value) {
    // TODO: implement put
  }

  @override
  Future<int> remove(Symbol index) {
    // TODO: implement remove
    throw UnimplementedError();
  }

  @override
  Future<int> removeAll() {
    // TODO: implement removeAll
    throw UnimplementedError();
  }

}

 */

