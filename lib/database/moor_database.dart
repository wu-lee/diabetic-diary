import 'package:diabetic_diary/basic_ingredient.dart';
import 'package:diabetic_diary/database.dart';
import 'package:diabetic_diary/measureable.dart';
import 'package:diabetic_diary/translation.dart';
import 'package:diabetic_diary/units.dart';
import 'package:flutter/foundation.dart';
import 'package:moor/ffi.dart';
// don't import moor_web.dart or moor_flutter/moor_flutter.dart in shared code
import 'package:moor/moor.dart';
//import 'package:moor/moor_web.dart';
import 'package:path_provider/path_provider.dart';
import 'package:path/path.dart' as p;
import 'dart:io';

import '../dimensions.dart';
import '../dish.dart';
import '../edible.dart';
import '../indexable.dart';
import '../meal.dart';
import '../quantity.dart';

// Include the autogenerated code
part 'moor_database.g.dart';

//  Generate the code needed with:
//      flutter packages pub run build_runner build
//
//  To continuously rebuild the generated code when changed:
//      flutter packages pub run build_runner watch

class _Dimensions extends Table {
  TextColumn get id => text()();
  TextColumn get componentId => text()();
  IntColumn get exponent => integer()();

  @override
  Set<Column> get primaryKey => {id, componentId};
}

class _Units extends Table {
  TextColumn get id => text()();
  TextColumn get dimensionsId => text().customConstraint('NOT NULL REFERENCES dimensions(id)')();
  RealColumn get multiplier => real()();

  @override
  Set<Column> get primaryKey => {dimensionsId, id};
}

class _Measurables extends Table {
  TextColumn get id => text()();
  TextColumn get dimensionsId => text().customConstraint('NOT NULL REFERENCES dimensions(id)')();

  @override
  Set<Column> get primaryKey => {id};
}

class _Edibles extends Table {
  TextColumn get id => text()(); // a BasicIngredient or an Dish
  BoolColumn get isBasic => boolean()(); // True if a BasicIngredient
  @override
  Set<Column> get primaryKey => {id};
}

class _BasicIngredientContents extends Table {
  TextColumn get id => text().customConstraint('NOT NULL REFERENCES edibles(id)')();
  TextColumn get contains => text().customConstraint('NOT NULL REFERENCES measurables(id)')();
  RealColumn get amount => real()();
  TextColumn get unitsId => text().customConstraint('NOT NULL REFERENCES units(id)')();

  @override
  Set<Column> get primaryKey => {id, contains};
}

class _DishContents extends Table {
  TextColumn get id => text().customConstraint('NOT NULL REFERENCES edibles(id)')();
  TextColumn get contains => text().customConstraint('NOT NULL REFERENCES edibles(id)')();
  RealColumn get amount => real()();
  TextColumn get unitsId => text().customConstraint('NOT NULL REFERENCES units(id)')();

  @override
  Set<Column> get primaryKey => {id, contains};
}

class _Meals extends Table {
  TextColumn get id => text()();
  TextColumn get title => text()();
  TextColumn get notes => text()();
  DateTimeColumn get timestamp => dateTime()();

  @override
  Set<Column> get primaryKey => {id};
}

class _MealContents extends Table {
  TextColumn get id => text().customConstraint('NOT NULL REFERENCES meals(id)')();
  TextColumn get contains => text().customConstraint('NOT NULL REFERENCES edibles(id)')();
  RealColumn get amount => real()();
  TextColumn get unitsId => text().customConstraint('NOT NULL REFERENCES units(id)')();

  @override
  Set<Column> get primaryKey => {id, contains};
}

class _Config extends Table {
  TextColumn get id => text()();
  TextColumn get value => text()();

  @override
  Set<Column> get primaryKey => {id};
}

LazyDatabase _openConnection() {
  // the LazyDatabase util lets us find the right location for the file async.
  return LazyDatabase(() async {
    // put the database file, called db.sqlite here, into the documents folder
    // for your app.
    final dbFolder = await getApplicationDocumentsDirectory();
    final file = File(p.join(dbFolder.path, 'db.sqlite'));
    debugPrint("opening moor db at $file");
    return VmDatabase(file);
//    return WebDatabase('db');
  });
}

@UseMoor(tables: [_Config, _Units, _Dimensions, _Measurables, _BasicIngredientContents, _Edibles, _DishContents,
                  _Meals, _MealContents])
class _MoorDatabase extends _$_MoorDatabase {
  // we tell the database where to store the data with this constructor
  _MoorDatabase() : super(_openConnection());

  // you should bump this number whenever you change or add a table definition. Migrations
  // are covered later in this readme.
  @override
  int get schemaVersion => 1;
}


class MoorDatabase extends Database {
  final _MoorDatabase db;

  MoorDatabase(this.db) :
        dimensions = MoorDimensionsCollection(db),
        units = MoorUnitsCollection(db),
        measurables = MoorMeasurablesCollection(db),
        edibles = MoorEdiblesCollection(db: db),
        ingredients = MoorBasicIngredientsCollection(db: db),
        dishes = MoorDishesCollection(db: db),
        meals = MoorMealsCollection(db: db);

  static MoorDatabase create() {
    return MoorDatabase(_MoorDatabase());
  }


  @override
  final AsyncDataCollection<Dimensions> dimensions;

  @override
  final AsyncDataCollection<Units> units;

  @override
  final AsyncDataCollection<Measurable> measurables;

  @override
  final AsyncDataCollection<Edible> edibles;

  @override
  final AsyncDataCollection<BasicIngredient> ingredients;

  @override
  final AsyncDataCollection<Dish> dishes;

  @override
  final AsyncDataCollection<Meal> meals;

  @override
  Future<int> get version async => db.schemaVersion;

  @override
  Future<int> get deployedVersion async {
    try {
      final versionQuery = db.select(db.config)
        ..where((t) => t.id.equals('version'));
      final result = await versionQuery.getSingleOrNull();
      if (result == null)
        return 0;
      final version = int.tryParse(result.value);
      return version == null ? 0 : version;
    }
    catch(e) {
      return 0;
    }
  }

  @override
  Future<void> setDeployedVersion(int version) async {
    final versionRecord = _ConfigData(id: 'version', value: version.toString());
    await db.into(db.config).insertOnConflictUpdate(versionRecord);
    return;
  }

  @override
  Future<void> clear() async {
    final foo = await db.customSelect("SELECT * FROM sqlite_master WHERE type='table'").get();
    for(final row in foo) {
      final name = row.data['name'].toString();
      debugPrint("Deleting table $name");
      await db.customStatement("DROP TABLE IF EXISTS '"+name.replaceAll("'", "''")+"'");
    }
    // Create tables
    final m = db.createMigrator();
    for (final table in db.allTables.toList()) {
      debugPrint("Creating table ${table.actualTableName}");
      await m.createTable(table);
    }
    return;
  }
}

abstract class MoorDataCollection<T extends Table, D extends DataClass, D2 extends Indexable> implements AsyncDataCollection<D2> {
  final _MoorDatabase db;
  final TableInfo<T, D> tableInfo;
  final GeneratedTextColumn idCol;

  MoorDataCollection(this.db, this.tableInfo, this.idCol);

  Insertable<D> valueToRow(D2 val);
  D2 rowToValue(D row);

  SimpleSelectStatement<T, D> _rowFor(Symbol index) {
    return db
      .select(tableInfo)
      ..where((a) => idCol.equals(symbolToString(index)));
  }

  @override
  Future<bool> containsId(Symbol index) async {
    final count = db
        .selectOnly(tableInfo)
      ..addColumns([idCol])
      ..where(idCol.equals(symbolToString(index)))
      ..limit(1);
    return null != await count.getSingleOrNull();
  }

  @override
  Future<Symbol> add(D2 value) async {
    final row = valueToRow(value);
//    final result = await db.into(tableInfo).insertOnConflictUpdate(row);
    final result = await db.into(tableInfo).insert(row);
    return value.id;
  }

  @override
  Future<int> count() async {
    final count = countAll();
    final query = db.selectOnly(tableInfo)..addColumns([count]);
    final result = await query.getSingle();
    return result.read(count);
  }

  @override
  Future<D2> fetch(Symbol index) async {
    final row = await _rowFor(index).getSingleOrNull();
    if (row == null)
      throw ArgumentError("no $D2 value for id ${symbolToString(index)}");

    // Convert the list of rows into a map from dimension id to exponent
    return rowToValue(row);
  }

  @override
  Future<D2> get(Symbol index, D2 otherwise) async {
    final row = await _rowFor(index).getSingleOrNull();
    if (row == null)
      return otherwise;
    return rowToValue(row);
  }

  @override
  Future<Map<Symbol, D2>> getAll() async {
    final query = db.select(tableInfo);
    final rows = await query.get();
    return Map.fromEntries(rows.map((row) {
      final value = rowToValue(row);
      return MapEntry(value.id, value);
    }));
  }

  @override
  Future<D2?> maybeGet(Symbol index, [D2? otherwise]) async {
    final row = await _rowFor(index).getSingleOrNull();
    if (row == null)
      return otherwise;
    return rowToValue(row);
  }

  @override
  Future<int> remove(Symbol index) async {
    final results = db
        .delete(tableInfo)
      ..where((u) => idCol.equals(symbolToString(index)));
    return results.go();
  }

  @override
  Future<int> removeAll() {
    final results = db
        .delete(tableInfo);
    return results.go();
  }
}

class MoorDimensionsCollection implements AsyncDataCollection<Dimensions> {
  final _MoorDatabase db;
  final $_DimensionsTable table;
  final GeneratedTextColumn idCol;
  SimpleSelectStatement<Table, dynamic> get commonQuery => db.select(db.dimensions);

  MoorDimensionsCollection(this.db) :
        table = db.dimensions,
        idCol = db.dimensions.id;

  Iterable<Insertable<_Dimension>> valueToRows(Dimensions value) {
    List<Insertable<_Dimension>> rows = [];
    value.components.forEach((k, v) {
      rows.add(_Dimension(
        id: symbolToString(value.id),
        componentId: symbolToString(k),
        exponent: v,
      ));
    });
    return rows;
  }

  Map<Symbol, Dimensions> rowsToValues(Iterable<_Dimension> rows) {
    final Map<Symbol, Map<Symbol, int>> map = {};
    rows.forEach((row) {
      final dim = map[Symbol(row.id)] ??= <Symbol, int>{};
      dim[Symbol(row.componentId)] ??= row.exponent;
    });
    return map.map((k,v) => MapEntry(k, Dimensions(id: k, components: v)));
  }

  SimpleSelectStatement<$_DimensionsTable, _Dimension> _rowsFor(Symbol index) {
    return db
        .select(table, distinct: true)
      ..where((a) => idCol.equals(symbolToString(index)));
  }

  @override
  Future<Symbol> add(Dimensions value) {
    final newRows = valueToRows(value).toList(); // FIXME stream this?
    final delRows = db.delete(table)..where((t) => idCol.equals(symbolToString(value.id)));
    return db.transaction(() async {
      await delRows.go();
      await db.batch((batch) {
        batch.insertAll(
          table,
          newRows,
        );
      });
      return value.id;
    });
  }

  @override
  Future<int> count() async {
    final count = idCol.count(distinct: true);
    final query = db.selectOnly(table)
      ..addColumns([count]);

    final r = await query.getSingle();
    return r.read(count);
  }

  @override
  Future<bool> containsId(Symbol index) async {
    final count = db
        .selectOnly(table)
        ..addColumns([idCol])
        ..where(idCol.equals(symbolToString(index)))
        ..limit(1);
    return null != await count.getSingleOrNull();
  }

  @override
  Future<Dimensions> fetch(Symbol index) async {
    final rows = await _rowsFor(index).get();
    if (rows.isEmpty)
      throw ArgumentError("no value for id ${symbolToString(index)}");
    return rowsToValues(rows).values.first;
  }

  @override
  Future<Dimensions> get(Symbol index, Dimensions otherwise) async {
    final rows = await _rowsFor(index).get();
    if (rows.isEmpty)
      return otherwise;
    return rowsToValues(rows).values.first;
  }

  @override
  Future<Map<Symbol, Dimensions>> getAll() async {
    final rows = await db
        .select(table, distinct: true).get();
    return rowsToValues(rows);
  }

  @override
  Future<Dimensions?> maybeGet(Symbol index, [Dimensions? otherwise]) async {
    final rows = await _rowsFor(index).get();
    if (rows.isEmpty)
      return otherwise;

    // Convert the list of rows into a map from dimension id to exponent
    return rowsToValues(rows).values.first;
  }

  @override
  Future<int> remove(Symbol index) {
    final results = db
        .delete(table)
      ..where((a) => idCol.equals(symbolToString(index)));
    return results.go();
  }

  @override
  Future<int> removeAll() {
    final results = db
        .delete(table);
    return results.go();
  }
}


class MoorUnitsCollection extends MoorDataCollection<$_UnitsTable, _Unit, Units> {

  MoorUnitsCollection(_MoorDatabase db) : super(db, db.units, db.units.id);

  @override
  Units rowToValue(_Unit row) {
    return Units(Symbol(row.id), Symbol(row.dimensionsId), row.multiplier);
  }

  @override
  Insertable<_Unit> valueToRow(Units val)  {
    return _Unit(
      dimensionsId: symbolToString(val.dimensionsId),
      id: symbolToString(val.id),
      multiplier: val.multiplier.toDouble(),
    );
  }
}

class MoorMeasurablesCollection extends MoorDataCollection<$_MeasurablesTable, _Measurable, Measurable> {

  MoorMeasurablesCollection(_MoorDatabase db) : super(db, db.measurables, db.measurables.id);

  @override
  Measurable rowToValue(_Measurable row) {
    return Measurable(id: Symbol(row.id), dimensionsId: Symbol(row.dimensionsId));
  }

  @override
  Insertable<_Measurable> valueToRow(Measurable val)  {
    return _Measurable(
      id: symbolToString(val.id),
      dimensionsId: symbolToString(val.dimensionsId),
    );
  }
}

abstract class MoorAbstractEdiblesCollection<T1 extends Table, D1 extends DataClass, T2 extends Table, D2 extends DataClass, E extends Edible> implements AsyncDataCollection<E> {
  final _MoorDatabase db;
  final TableInfo<T1, D1> table;
  final TableInfo<T2, D2> joinedTable;
  final GeneratedTextColumn idCol;
  final GeneratedTextColumn joinedIdCol;

  MoorAbstractEdiblesCollection({required this.db, required this.table, required this.joinedTable, required this.idCol, required this.joinedIdCol});

  Iterable<Insertable<D1>> edibleToRows(E value);

  Iterable<Insertable<D2>> contentToRows(E value);

  Iterable<Insertable<_Unit>> valueToUnitRows(E value);

  Map<Symbol, E> rowsToValues(List<D1> dishRows, Iterable<TypedResult> contentRows);

  SimpleSelectStatement<T1, D1> get edibleQuery;

  JoinedSelectStatement<Table, dynamic> get contentsQuery;

  SimpleSelectStatement<T1, D1> _dishRowsFor(Symbol index) {
    return edibleQuery
      ..where((a) => idCol.equals(symbolToString(index)));
  }

  JoinedSelectStatement<Table, dynamic> _contentRowsFor(Symbol index) {
    return contentsQuery
      ..where(joinedIdCol.equals(symbolToString(index)));
  }

  @override
  Future<bool> containsId(Symbol index) async {
    final count = db
        .selectOnly(table)
      ..addColumns([idCol])
      ..where(idCol.equals(symbolToString(index)))
      ..limit(1);
    return null != await count.getSingleOrNull();
  }

  @override
  Future<Symbol> add(E value) async {
    final unitsRows = valueToUnitRows(value);
    final dishRows = edibleToRows(value); // FIXME stream this?
    final contentRows = contentToRows(value); // FIXME stream this?
    final delDishs = db.delete(table)..where((t) => idCol.equals(symbolToString(value.id)));
    final delContent = db.delete(joinedTable)..where((t) => joinedIdCol.equals(symbolToString(value.id)));
    return db.transaction(() async {
      await delContent.go();
      await delDishs.go();
      await db.batch((batch) {
        batch.insertAll(
            table,
            dishRows.toList(),
        );
        batch.insertAll(
          joinedTable,
          contentRows.toList(),
        );
        batch.insertAll(
            db.units,
            unitsRows.toList(),
            mode: InsertMode.insertOrReplace
        );
      });
      return value.id;
    });
  }

  @override
  Future<int> count() async { // same as dims
    final count = idCol.count(distinct: true);
    final query = db.selectOnly(table)
      ..addColumns([count]);

    final r = await query.getSingle();
    return r.read(count);
  }

  @override
  Future<E> fetch(Symbol index) async {
    final dishRows = await _dishRowsFor(index).get();
    if (dishRows.isEmpty)
      throw ArgumentError("no value for id ${symbolToString(index)}");
    final contentRows = await _contentRowsFor(index).get();
    return rowsToValues(dishRows, contentRows).values.first;
  }

  @override
  Future<E> get(Symbol index, E otherwise) async {
    final dishRows = await _dishRowsFor(index).get();
    if (dishRows.isEmpty)
      return otherwise;
    final contentRows = await _contentRowsFor(index).get();
    return rowsToValues(dishRows, contentRows).values.first;
  }

  @override
  Future<Map<Symbol, E>> getAll() async {
    final dishRows =  await edibleQuery.get();
    final contentRows = await contentsQuery.get();
    return rowsToValues(dishRows, contentRows);
  }

  @override
  Future<E?> maybeGet(Symbol index, [E? otherwise]) async {
    final dishRows = await _dishRowsFor(index).get();
    if (dishRows.isEmpty)
      return otherwise;
    final contentRows = await _contentRowsFor(index).get();
    return rowsToValues(dishRows, contentRows).values.first;
  }

  @override
  Future<int> remove(Symbol index) async {
    final dishQuery = db.delete(table)..where((a) => idCol.equals(symbolToString(index)));
    final contentsQuery = db.delete(joinedTable)..where((a) => idCol.equals(symbolToString(index)));
    int deleted = await dishQuery.go();
    deleted += await contentsQuery.go();
    return deleted;
  }

  @override
  Future<int> removeAll() async {
    int deleted = await db.delete(table).go() + await db.delete(joinedTable).go();
    return deleted;
  }
}

class MoorEdiblesCollection extends MoorAbstractEdiblesCollection<$_EdiblesTable, _Edible, $_DishContentsTable, _DishContent, Edible> {

  MoorEdiblesCollection({required _MoorDatabase db}) :
        super(
        db: db,
        table: db.edibles,
        joinedTable: db.dishContents,
        idCol: db.edibles.id,
        joinedIdCol: db.dishContents.id,
      );

  SimpleSelectStatement<$_EdiblesTable, _Edible> get edibleQuery =>
      db.select(table);

  JoinedSelectStatement<Table, dynamic> get contentsQuery =>
      db.select(joinedTable)
          .join([
        leftOuterJoin(db.units, db.dishContents.unitsId.equalsExp(db.units.id))
      ]);

  Iterable<Insertable<_Edible>> edibleToRows(Edible value) {
    List<Insertable<_Edible>> rows = [];
    rows.add(_Edible(
      id: symbolToString(value.id),
      isBasic: value is BasicIngredient,
    ));
    return rows;
  }

  Iterable<Insertable<_DishContent>> contentToRows(Edible value) {
    List<Insertable<_DishContent>> rows = [];
    value.contents.forEach((k, v) {
      rows.add(_DishContent(
        id: symbolToString(value.id),
        contains: symbolToString(k),
        amount: v.amount.toDouble(),
        unitsId: symbolToString(v.units.id),
      ));
    });
    return rows;
  }
  Iterable<Insertable<_Unit>> valueToUnitRows(Edible value) {
    // Dedupe
    final units = value.contents.map((k, v) => MapEntry(
        v.units.id, v.units
    ));

    // Convert
    return units.values.map((v) =>
        _Unit(
          id: symbolToString(v.id),
          dimensionsId: symbolToString(v.dimensionsId),
          multiplier: v.multiplier.toDouble(),
        )
    );
  }

  Map<Symbol, Edible> rowsToValues(List<_Edible> edibleRows, Iterable<TypedResult> contentRows) {
    final Map<Symbol, Map<Symbol, Quantity>> edibles = {};
    final Map<Symbol, bool> isBasic = {};
    edibleRows.forEach((edibleFields) {
      final id = Symbol(edibleFields.id);
      edibles[id] ??= <Symbol, Quantity>{};
      isBasic[id] = edibleFields.isBasic;
    });
    contentRows.forEach((row) {
      final contentFields = row.readTable(db.dishContents);
      final id = Symbol(contentFields.id);
      final contains = Symbol(contentFields.contains);
      final dim = edibles[id];
      if (dim == null)
        return; // not present... FIXME signal an error?
      final unitsFields = row.readTableOrNull(db.units);
      final units = unitsFields == null?
      Units.rogueValue :
      Units(Symbol(contentFields.unitsId), Symbol(unitsFields.dimensionsId), unitsFields.multiplier);

      dim[contains] = Quantity(
          contentFields.amount,
          units);
    });
    return edibles.map((id, contents) => MapEntry(
        id,
        isBasic[id] == true? BasicIngredient(id: id, contents: contents) : Dish(id: id, contents: contents)
    ));
  }


}


class MoorDishesCollection extends MoorAbstractEdiblesCollection<$_EdiblesTable, _Edible, $_DishContentsTable, _DishContent, Dish> {

  MoorDishesCollection({required _MoorDatabase db}) :
        super(
          db: db,
          table: db.edibles,
          joinedTable: db.dishContents,
          idCol: db.edibles.id,
          joinedIdCol: db.dishContents.id,
      );

  SimpleSelectStatement<$_EdiblesTable, _Edible> get edibleQuery =>
      db.select(table)..where((tbl) => db.edibles.isBasic.equals(false));

  JoinedSelectStatement<Table, dynamic> get contentsQuery =>
      db.select(joinedTable)
          .join([
        leftOuterJoin(db.units, db.dishContents.unitsId.equalsExp(db.units.id))
      ]);

  Iterable<Insertable<_Edible>> edibleToRows(Dish value) {
    List<Insertable<_Edible>> rows = [];
    rows.add(_Edible(
      id: symbolToString(value.id),
      isBasic: false,
    ));
    return rows;
  }

  Iterable<Insertable<_DishContent>> contentToRows(Dish value) {
    List<Insertable<_DishContent>> rows = [];
    value.contents.forEach((k, v) {
      rows.add(_DishContent(
        id: symbolToString(value.id),
        contains: symbolToString(k),
        amount: v.amount.toDouble(),
        unitsId: symbolToString(v.units.id),
      ));
    });
    return rows;
  }
  Iterable<Insertable<_Unit>> valueToUnitRows(Dish value) {
    // Dedupe
    final units = value.contents.map((k, v) => MapEntry(
        v.units.id, v.units
    ));

    // Convert
    return units.values.map((v) =>
        _Unit(
          id: symbolToString(v.id),
          dimensionsId: symbolToString(v.dimensionsId),
          multiplier: v.multiplier.toDouble(),
        )
    );
  }

  Map<Symbol, Dish> rowsToValues(List<_Edible> dishRows, Iterable<TypedResult> contentRows) {
    final Map<Symbol, Map<Symbol, Quantity>> dishes = {};
    dishRows.forEach((dishFields) {
      final id = Symbol(dishFields.id);
      dishes[id] ??= <Symbol, Quantity>{};
    });
    contentRows.forEach((row) {
      final contentFields = row.readTable(db.dishContents);
      final id = Symbol(contentFields.id);
      final contains = Symbol(contentFields.contains);
      final dim = dishes[id];
      if (dim == null)
        return; // not present... FIXME signal an error?
      final unitsFields = row.readTableOrNull(db.units);
      final units = unitsFields == null?
      Units.rogueValue :
      Units(Symbol(contentFields.unitsId), Symbol(unitsFields.dimensionsId), unitsFields.multiplier);

      dim[contains] = Quantity(
          contentFields.amount,
          units);
    });
    return dishes.map((id, contents) => MapEntry(
        id,
        Dish(id: id, contents: contents)
    ));
  }


}

class MoorBasicIngredientsCollection extends MoorAbstractEdiblesCollection<$_EdiblesTable, _Edible, $_BasicIngredientContentsTable, _BasicIngredientContent, BasicIngredient> {

  MoorBasicIngredientsCollection({required _MoorDatabase db}) :
        super(
          db: db,
          table: db.edibles,
          joinedTable: db.basicIngredientContents,
          idCol: db.edibles.id,
          joinedIdCol: db.basicIngredientContents.id
      );

  SimpleSelectStatement<$_EdiblesTable, _Edible> get edibleQuery =>
      db.select(table)..where((tbl) => db.edibles.isBasic.equals(true));

  JoinedSelectStatement<Table, dynamic> get contentsQuery =>
      db.select(joinedTable)
          .join([
        leftOuterJoin(db.units, db.basicIngredientContents.unitsId.equalsExp(db.units.id))
      ]);

  Iterable<Insertable<_Edible>> edibleToRows(BasicIngredient value) {
    List<Insertable<_Edible>> rows = [];
    rows.add(_Edible(
      id: symbolToString(value.id),
      isBasic: true,
    ));
    return rows;
  }

  Iterable<Insertable<_BasicIngredientContent>> contentToRows(BasicIngredient value) {
    List<Insertable<_BasicIngredientContent>> rows = [];
    value.contents.forEach((k, v) {
      rows.add(_BasicIngredientContent(
        id: symbolToString(value.id),
        contains: symbolToString(k),
        amount: v.amount.toDouble(),
        unitsId: symbolToString(v.units.id),
      ));
    });
    return rows;
  }
  Iterable<Insertable<_Unit>> valueToUnitRows(BasicIngredient value) {
    // Dedupe
    final units = value.contents.map((k, v) => MapEntry(
        v.units.id, v.units
    ));

    // Convert
    return units.values.map((v) =>
        _Unit(
          id: symbolToString(v.id),
          dimensionsId: symbolToString(v.dimensionsId),
          multiplier: v.multiplier.toDouble(),
        )
    );
  }

  Map<Symbol, BasicIngredient> rowsToValues(List<_Edible> dishRows, Iterable<TypedResult> contentRows) {
    final Map<Symbol, Map<Symbol, Quantity>> ingredients = {};
    dishRows.forEach((dishFields) {
      final id = Symbol(dishFields.id);
      ingredients[id] ??= <Symbol, Quantity>{};
    });
    contentRows.forEach((row) {
      final contentFields = row.readTable(db.basicIngredientContents);
      final id = Symbol(contentFields.id);
      final contains = Symbol(contentFields.contains);
      final dim = ingredients[id];
      if (dim == null)
        return; // not present... FIXME signal an error?
      final unitsFields = row.readTableOrNull(db.units);
      final units = unitsFields == null?
      Units.rogueValue :
      Units(Symbol(contentFields.unitsId), Symbol(unitsFields.dimensionsId), unitsFields.multiplier);

      dim[contains] = Quantity(
          contentFields.amount,
          units);
    });
    return ingredients.map((id, contents) => MapEntry(
        id,
        BasicIngredient(id: id, contents: contents)
    ));
  }
}

class MoorMealsCollection extends MoorAbstractEdiblesCollection<$_MealsTable, _Meal, $_MealContentsTable, _MealContent, Meal> {

  MoorMealsCollection({required _MoorDatabase db}) :
        super(
          db: db,
          table: db.meals,
          joinedTable: db.mealContents,
          idCol: db.meals.id,
          joinedIdCol: db.mealContents.id
      );

  SimpleSelectStatement<$_MealsTable, _Meal> get edibleQuery =>
      db.select(table);

  JoinedSelectStatement<Table, dynamic> get contentsQuery =>
      db.select(joinedTable)
          .join([
        leftOuterJoin(db.units, db.mealContents.unitsId.equalsExp(db.units.id))
      ]);

  Iterable<Insertable<_Meal>> edibleToRows(Meal value) {
    List<Insertable<_Meal>> rows = [];
    rows.add(_Meal(
      id: symbolToString(value.id),
      timestamp: value.timestamp,
      title: value.title,
      notes: value.notes,
    ));
    return rows;
  }

  Iterable<Insertable<_MealContent>> contentToRows(Meal value) {
    List<Insertable<_MealContent>> rows = [];
    value.contents.forEach((k, v) {
      rows.add(_MealContent(
        id: symbolToString(value.id),
        contains: symbolToString(k),
        amount: v.amount.toDouble(),
        unitsId: symbolToString(v.units.id),
      ));
    });
    return rows;
  }
  Iterable<Insertable<_Unit>> valueToUnitRows(Meal value) {
    // Dedupe
    final units = value.contents.map((k, v) => MapEntry(
        v.units.id, v.units
    ));

    // Convert
    return units.values.map((v) =>
        _Unit(
          id: symbolToString(v.id),
          dimensionsId: symbolToString(v.dimensionsId),
          multiplier: v.multiplier.toDouble(),
        )
    );
  }

  Map<Symbol, Meal> rowsToValues(List<_Meal> edibleRows, Iterable<TypedResult> contentRows) {
    final Map<Symbol, Map<Symbol, Quantity>> mealContents = {};
    final Map<Symbol, _Meal> meals = {};
    edibleRows.forEach((edibleFields) {
      final id = Symbol(edibleFields.id);
      meals[id] ??= edibleFields;
      mealContents[id] ??= <Symbol, Quantity>{};
    });
    contentRows.forEach((row) {
      final contentFields = row.readTable(db.mealContents);
      final id = Symbol(contentFields.id);
      final contains = Symbol(contentFields.contains);
      final dim = mealContents[id];
      if (dim == null)
        return; // not present... FIXME signal an error?
      final unitsFields = row.readTableOrNull(db.units);
      final units = unitsFields == null?
      Units.rogueValue :
      Units(Symbol(contentFields.unitsId), Symbol(unitsFields.dimensionsId), unitsFields.multiplier);

      dim[contains] = Quantity(
          contentFields.amount,
          units);
    });
    return meals.map((id, meal) => MapEntry(
        id,
        Meal(
            id: id,
            title: meal.title,
            notes: meal.notes,
            timestamp: meal.timestamp,
            contents: mealContents[id] ?? {},
        )
    ));
  }
}